{"version":3,"file":"static/js/520.ac976878.chunk.js","mappings":"8LAkCA,UA7BqB,WACnB,IAAMA,GAAUC,EAAAA,EAAAA,GAAc,qBAE9B,OACE,SAAC,IAAD,CACEC,UAAU,OACVC,GAAI,CACFC,QAAS,OACTC,WAAY,SACZC,cAAe,SACfC,WAAY,IANhB,UASE,SAAC,IAAD,CACEL,UAAU,KACVM,QAAQ,KACRL,GAAI,CACFM,SAAS,GAAD,OAAKT,EAAU,OAAS,QAChCU,UAAW,SACXC,aAAc,EACdC,MAAO,WAPX,gCAcL,C,iHCzBD,SAASC,EAAiBC,EAAOC,EAAgBC,EAAYC,EAAeC,GAC1E,IAAMC,EAAsC,qBAAXC,QAAuD,qBAAtBA,OAAOJ,WACzE,EAA0BK,EAAAA,UAAe,WACvC,OAAIH,GAASC,EACJH,EAAWF,GAAOd,QAGvBiB,EACKA,EAAcH,GAAOd,QAKvBe,CACR,IAZD,eAAOO,EAAP,KAAcC,EAAd,KAuCA,OA1BAC,EAAAA,EAAAA,IAAkB,WAChB,IAAIC,GAAS,EAEb,GAAKN,EAAL,CAIA,IAAMO,EAAYV,EAAWF,GAEvBa,EAAc,WAIdF,GACFF,EAASG,EAAU1B,QAEtB,EAKD,OAHA2B,IAEAD,EAAUE,YAAYD,GACf,WACLF,GAAS,EACTC,EAAUG,eAAeF,EAC1B,CAnBA,CAoBF,GAAE,CAACb,EAAOE,EAAYG,IAChBG,CACR,CAGD,IAAMQ,GAAiCT,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,KAAK,qBAE5C,SAASU,EAAiBjB,EAAOC,EAAgBC,EAAYC,GAC3D,IAAMe,EAAqBX,EAAAA,aAAkB,kBAAMN,CAAN,GAAsB,CAACA,IAC9DkB,EAAoBZ,EAAAA,SAAc,WACtC,GAAsB,OAAlBJ,EAAwB,CAC1B,IACEjB,EACEiB,EAAcH,GADhBd,QAEF,OAAO,kBAAMA,CAAN,CACR,CAED,OAAOgC,CACR,GAAE,CAACA,EAAoBlB,EAAOG,IAC/B,EAAiCI,EAAAA,SAAc,WAC7C,GAAmB,OAAfL,EACF,MAAO,CAACgB,EAAoB,kBAAM,WAAQ,CAAd,GAG9B,IAAME,EAAiBlB,EAAWF,GAClC,MAAO,CAAC,kBAAMoB,EAAelC,OAArB,EAA8B,SAAAmC,GAGpC,OADAD,EAAeN,YAAYO,GACpB,WACLD,EAAeL,eAAeM,EAC/B,CACF,EACF,GAAE,CAACH,EAAoBhB,EAAYF,IAbpC,eAAOsB,EAAP,KAAoBC,EAApB,KAeA,OADcP,EAA+BO,EAAWD,EAAaH,EAEtE,CAEc,SAAShC,EAAcqC,GAA0B,IAAdC,EAAc,uDAAJ,CAAC,EACrDC,GAAQC,EAAAA,EAAAA,KAKRtB,EAAsC,qBAAXC,QAAuD,qBAAtBA,OAAOJ,WACzE,GAKI0B,EAAAA,EAAAA,GAAc,CAChBC,KAAM,mBACNC,MAAOL,EACPC,MAAAA,IARF,IACEzB,eAAAA,OADF,aAEEC,WAAAA,OAFF,MAEeG,EAAoBC,OAAOJ,WAAa,KAFvD,MAGEC,cAAAA,OAHF,MAGkB,KAHlB,EAIEC,EAJF,EAIEA,MAaF,IAAIJ,EAA8B,oBAAfwB,EAA4BA,EAAWE,GAASF,EACnExB,EAAQA,EAAM+B,QAAQ,eAAgB,IAEtC,IAAMC,OAAiEC,IAAnCjB,EAA+CC,EAAmBlB,EAChGS,EAAQwB,EAA4BhC,EAAOC,EAAgBC,EAAYC,EAAeC,GAU5F,OAAOI,CACR,C","sources":["pages/NotFoundPage.jsx","../node_modules/@mui/material/useMediaQuery/useMediaQuery.js"],"sourcesContent":["//Material UI\nimport Container from '@mui/material/Container';\nimport Typography from '@mui/material/Typography';\nimport useMediaQuery from '@mui/material/useMediaQuery';\n\nconst NotFoundPage = () => {\n  const matches = useMediaQuery('(min-width:600px)');\n\n  return (\n    <Container\n      component=\"main\"\n      sx={{\n        display: 'flex',\n        alignItems: 'center',\n        flexDirection: 'column',\n        paddingTop: 10,\n      }}\n    >\n      <Typography\n        component=\"h1\"\n        variant=\"h3\"\n        sx={{\n          fontSize: `${matches ? '60px' : '48px'}`,\n          textAlign: 'center',\n          marginBottom: 3,\n          color: '#dddddd',\n        }}\n      >\n        Page not found...\n      </Typography>\n    </Container>\n  );\n};\n\nexport default NotFoundPage;\n","import * as React from 'react';\nimport { getThemeProps, useThemeWithoutDefault as useTheme } from '@mui/system';\nimport useEnhancedEffect from '../utils/useEnhancedEffect';\n/**\n * @deprecated Not used internally. Use `MediaQueryListEvent` from lib.dom.d.ts instead.\n */\n\nfunction useMediaQueryOld(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr) {\n  const supportMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia !== 'undefined';\n  const [match, setMatch] = React.useState(() => {\n    if (noSsr && supportMatchMedia) {\n      return matchMedia(query).matches;\n    }\n\n    if (ssrMatchMedia) {\n      return ssrMatchMedia(query).matches;\n    } // Once the component is mounted, we rely on the\n    // event listeners to return the correct matches value.\n\n\n    return defaultMatches;\n  });\n  useEnhancedEffect(() => {\n    let active = true;\n\n    if (!supportMatchMedia) {\n      return undefined;\n    }\n\n    const queryList = matchMedia(query);\n\n    const updateMatch = () => {\n      // Workaround Safari wrong implementation of matchMedia\n      // TODO can we remove it?\n      // https://github.com/mui/material-ui/pull/17315#issuecomment-528286677\n      if (active) {\n        setMatch(queryList.matches);\n      }\n    };\n\n    updateMatch(); // TODO: Use `addEventListener` once support for Safari < 14 is dropped\n\n    queryList.addListener(updateMatch);\n    return () => {\n      active = false;\n      queryList.removeListener(updateMatch);\n    };\n  }, [query, matchMedia, supportMatchMedia]);\n  return match;\n} // eslint-disable-next-line no-useless-concat -- Workaround for https://github.com/webpack/webpack/issues/14814\n\n\nconst maybeReactUseSyncExternalStore = React['useSyncExternalStore' + ''];\n\nfunction useMediaQueryNew(query, defaultMatches, matchMedia, ssrMatchMedia) {\n  const getDefaultSnapshot = React.useCallback(() => defaultMatches, [defaultMatches]);\n  const getServerSnapshot = React.useMemo(() => {\n    if (ssrMatchMedia !== null) {\n      const {\n        matches\n      } = ssrMatchMedia(query);\n      return () => matches;\n    }\n\n    return getDefaultSnapshot;\n  }, [getDefaultSnapshot, query, ssrMatchMedia]);\n  const [getSnapshot, subscribe] = React.useMemo(() => {\n    if (matchMedia === null) {\n      return [getDefaultSnapshot, () => () => {}];\n    }\n\n    const mediaQueryList = matchMedia(query);\n    return [() => mediaQueryList.matches, notify => {\n      // TODO: Use `addEventListener` once support for Safari < 14 is dropped\n      mediaQueryList.addListener(notify);\n      return () => {\n        mediaQueryList.removeListener(notify);\n      };\n    }];\n  }, [getDefaultSnapshot, matchMedia, query]);\n  const match = maybeReactUseSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n  return match;\n}\n\nexport default function useMediaQuery(queryInput, options = {}) {\n  const theme = useTheme(); // Wait for jsdom to support the match media feature.\n  // All the browsers MUI support have this built-in.\n  // This defensive check is here for simplicity.\n  // Most of the time, the match media logic isn't central to people tests.\n\n  const supportMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia !== 'undefined';\n  const {\n    defaultMatches = false,\n    matchMedia = supportMatchMedia ? window.matchMedia : null,\n    ssrMatchMedia = null,\n    noSsr\n  } = getThemeProps({\n    name: 'MuiUseMediaQuery',\n    props: options,\n    theme\n  });\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof queryInput === 'function' && theme === null) {\n      console.error(['MUI: The `query` argument provided is invalid.', 'You are providing a function without a theme in the context.', 'One of the parent elements needs to use a ThemeProvider.'].join('\\n'));\n    }\n  }\n\n  let query = typeof queryInput === 'function' ? queryInput(theme) : queryInput;\n  query = query.replace(/^@media( ?)/m, ''); // TODO: Drop `useMediaQueryOld` and use  `use-sync-external-store` shim in `useMediaQueryNew` once the package is stable\n\n  const useMediaQueryImplementation = maybeReactUseSyncExternalStore !== undefined ? useMediaQueryNew : useMediaQueryOld;\n  const match = useMediaQueryImplementation(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr);\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useDebugValue({\n      query,\n      match\n    });\n  }\n\n  return match;\n}"],"names":["matches","useMediaQuery","component","sx","display","alignItems","flexDirection","paddingTop","variant","fontSize","textAlign","marginBottom","color","useMediaQueryOld","query","defaultMatches","matchMedia","ssrMatchMedia","noSsr","supportMatchMedia","window","React","match","setMatch","useEnhancedEffect","active","queryList","updateMatch","addListener","removeListener","maybeReactUseSyncExternalStore","useMediaQueryNew","getDefaultSnapshot","getServerSnapshot","mediaQueryList","notify","getSnapshot","subscribe","queryInput","options","theme","useTheme","getThemeProps","name","props","replace","useMediaQueryImplementation","undefined"],"sourceRoot":""}